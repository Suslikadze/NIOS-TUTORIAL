// UART_NIOSII.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module UART_NIOSII (
		input  wire  clk_clk,       //    clk.clk
		input  wire  reset_reset_n, //  reset.reset_n
		input  wire  serial_rxd,    // serial.rxd
		output wire  serial_txd     //       .txd
	);

	wire  [31:0] hostpc_data_master_readdata;                          // mm_interconnect_0:HostPC_data_master_readdata -> HostPC:d_readdata
	wire         hostpc_data_master_waitrequest;                       // mm_interconnect_0:HostPC_data_master_waitrequest -> HostPC:d_waitrequest
	wire         hostpc_data_master_debugaccess;                       // HostPC:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:HostPC_data_master_debugaccess
	wire  [18:0] hostpc_data_master_address;                           // HostPC:d_address -> mm_interconnect_0:HostPC_data_master_address
	wire   [3:0] hostpc_data_master_byteenable;                        // HostPC:d_byteenable -> mm_interconnect_0:HostPC_data_master_byteenable
	wire         hostpc_data_master_read;                              // HostPC:d_read -> mm_interconnect_0:HostPC_data_master_read
	wire         hostpc_data_master_write;                             // HostPC:d_write -> mm_interconnect_0:HostPC_data_master_write
	wire  [31:0] hostpc_data_master_writedata;                         // HostPC:d_writedata -> mm_interconnect_0:HostPC_data_master_writedata
	wire  [31:0] hostpc_instruction_master_readdata;                   // mm_interconnect_0:HostPC_instruction_master_readdata -> HostPC:i_readdata
	wire         hostpc_instruction_master_waitrequest;                // mm_interconnect_0:HostPC_instruction_master_waitrequest -> HostPC:i_waitrequest
	wire  [18:0] hostpc_instruction_master_address;                    // HostPC:i_address -> mm_interconnect_0:HostPC_instruction_master_address
	wire         hostpc_instruction_master_read;                       // HostPC:i_read -> mm_interconnect_0:HostPC_instruction_master_read
	wire  [31:0] mm_interconnect_0_hostpc_debug_mem_slave_readdata;    // HostPC:debug_mem_slave_readdata -> mm_interconnect_0:HostPC_debug_mem_slave_readdata
	wire         mm_interconnect_0_hostpc_debug_mem_slave_waitrequest; // HostPC:debug_mem_slave_waitrequest -> mm_interconnect_0:HostPC_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_hostpc_debug_mem_slave_debugaccess; // mm_interconnect_0:HostPC_debug_mem_slave_debugaccess -> HostPC:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_hostpc_debug_mem_slave_address;     // mm_interconnect_0:HostPC_debug_mem_slave_address -> HostPC:debug_mem_slave_address
	wire         mm_interconnect_0_hostpc_debug_mem_slave_read;        // mm_interconnect_0:HostPC_debug_mem_slave_read -> HostPC:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_hostpc_debug_mem_slave_byteenable;  // mm_interconnect_0:HostPC_debug_mem_slave_byteenable -> HostPC:debug_mem_slave_byteenable
	wire         mm_interconnect_0_hostpc_debug_mem_slave_write;       // mm_interconnect_0:HostPC_debug_mem_slave_write -> HostPC:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_hostpc_debug_mem_slave_writedata;   // mm_interconnect_0:HostPC_debug_mem_slave_writedata -> HostPC:debug_mem_slave_writedata
	wire         mm_interconnect_0_memory_s1_chipselect;               // mm_interconnect_0:Memory_s1_chipselect -> Memory:chipselect
	wire  [31:0] mm_interconnect_0_memory_s1_readdata;                 // Memory:readdata -> mm_interconnect_0:Memory_s1_readdata
	wire  [14:0] mm_interconnect_0_memory_s1_address;                  // mm_interconnect_0:Memory_s1_address -> Memory:address
	wire   [3:0] mm_interconnect_0_memory_s1_byteenable;               // mm_interconnect_0:Memory_s1_byteenable -> Memory:byteenable
	wire         mm_interconnect_0_memory_s1_write;                    // mm_interconnect_0:Memory_s1_write -> Memory:write
	wire  [31:0] mm_interconnect_0_memory_s1_writedata;                // mm_interconnect_0:Memory_s1_writedata -> Memory:writedata
	wire         mm_interconnect_0_memory_s1_clken;                    // mm_interconnect_0:Memory_s1_clken -> Memory:clken
	wire         mm_interconnect_0_uart_s1_chipselect;                 // mm_interconnect_0:uart_s1_chipselect -> uart:chipselect
	wire  [15:0] mm_interconnect_0_uart_s1_readdata;                   // uart:readdata -> mm_interconnect_0:uart_s1_readdata
	wire   [2:0] mm_interconnect_0_uart_s1_address;                    // mm_interconnect_0:uart_s1_address -> uart:address
	wire         mm_interconnect_0_uart_s1_read;                       // mm_interconnect_0:uart_s1_read -> uart:read_n
	wire         mm_interconnect_0_uart_s1_begintransfer;              // mm_interconnect_0:uart_s1_begintransfer -> uart:begintransfer
	wire         mm_interconnect_0_uart_s1_write;                      // mm_interconnect_0:uart_s1_write -> uart:write_n
	wire  [15:0] mm_interconnect_0_uart_s1_writedata;                  // mm_interconnect_0:uart_s1_writedata -> uart:writedata
	wire         irq_mapper_receiver0_irq;                             // uart:irq -> irq_mapper:receiver0_irq
	wire  [31:0] hostpc_irq_irq;                                       // irq_mapper:sender_irq -> HostPC:irq
	wire         rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [HostPC:reset_n, irq_mapper:reset, mm_interconnect_0:HostPC_reset_reset_bridge_in_reset_reset, rst_translator:in_reset, uart:reset_n]
	wire         rst_controller_reset_out_reset_req;                   // rst_controller:reset_req -> [HostPC:reset_req, rst_translator:reset_req_in]
	wire         hostpc_debug_reset_request_reset;                     // HostPC:debug_reset_request -> rst_controller:reset_in1
	wire         rst_controller_001_reset_out_reset;                   // rst_controller_001:reset_out -> [Memory:reset, mm_interconnect_0:Memory_reset1_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset_req;               // rst_controller_001:reset_req -> Memory:reset_req

	UART_NIOSII_HostPC hostpc (
		.clk                                 (clk_clk),                                              //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                      //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                   //                          .reset_req
		.d_address                           (hostpc_data_master_address),                           //               data_master.address
		.d_byteenable                        (hostpc_data_master_byteenable),                        //                          .byteenable
		.d_read                              (hostpc_data_master_read),                              //                          .read
		.d_readdata                          (hostpc_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (hostpc_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (hostpc_data_master_write),                             //                          .write
		.d_writedata                         (hostpc_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (hostpc_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (hostpc_instruction_master_address),                    //        instruction_master.address
		.i_read                              (hostpc_instruction_master_read),                       //                          .read
		.i_readdata                          (hostpc_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (hostpc_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (hostpc_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (hostpc_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_hostpc_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_hostpc_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_hostpc_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_hostpc_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_hostpc_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_hostpc_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_hostpc_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_hostpc_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                      // custom_instruction_master.readra
	);

	UART_NIOSII_Memory memory (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_memory_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_memory_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_memory_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_memory_s1_write),      //       .write
		.readdata   (mm_interconnect_0_memory_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_memory_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_memory_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),     // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req), //       .reset_req
		.freeze     (1'b0)                                    // (terminated)
	);

	UART_NIOSII_uart uart (
		.clk           (clk_clk),                                 //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),         //               reset.reset_n
		.address       (mm_interconnect_0_uart_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_s1_readdata),      //                    .readdata
		.rxd           (serial_rxd),                              // external_connection.export
		.txd           (serial_txd),                              //                    .export
		.irq           (irq_mapper_receiver0_irq)                 //                 irq.irq
	);

	UART_NIOSII_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                             (clk_clk),                                              //                           clk_0_clk.clk
		.HostPC_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),                       //  HostPC_reset_reset_bridge_in_reset.reset
		.Memory_reset1_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                   // Memory_reset1_reset_bridge_in_reset.reset
		.HostPC_data_master_address                (hostpc_data_master_address),                           //                  HostPC_data_master.address
		.HostPC_data_master_waitrequest            (hostpc_data_master_waitrequest),                       //                                    .waitrequest
		.HostPC_data_master_byteenable             (hostpc_data_master_byteenable),                        //                                    .byteenable
		.HostPC_data_master_read                   (hostpc_data_master_read),                              //                                    .read
		.HostPC_data_master_readdata               (hostpc_data_master_readdata),                          //                                    .readdata
		.HostPC_data_master_write                  (hostpc_data_master_write),                             //                                    .write
		.HostPC_data_master_writedata              (hostpc_data_master_writedata),                         //                                    .writedata
		.HostPC_data_master_debugaccess            (hostpc_data_master_debugaccess),                       //                                    .debugaccess
		.HostPC_instruction_master_address         (hostpc_instruction_master_address),                    //           HostPC_instruction_master.address
		.HostPC_instruction_master_waitrequest     (hostpc_instruction_master_waitrequest),                //                                    .waitrequest
		.HostPC_instruction_master_read            (hostpc_instruction_master_read),                       //                                    .read
		.HostPC_instruction_master_readdata        (hostpc_instruction_master_readdata),                   //                                    .readdata
		.HostPC_debug_mem_slave_address            (mm_interconnect_0_hostpc_debug_mem_slave_address),     //              HostPC_debug_mem_slave.address
		.HostPC_debug_mem_slave_write              (mm_interconnect_0_hostpc_debug_mem_slave_write),       //                                    .write
		.HostPC_debug_mem_slave_read               (mm_interconnect_0_hostpc_debug_mem_slave_read),        //                                    .read
		.HostPC_debug_mem_slave_readdata           (mm_interconnect_0_hostpc_debug_mem_slave_readdata),    //                                    .readdata
		.HostPC_debug_mem_slave_writedata          (mm_interconnect_0_hostpc_debug_mem_slave_writedata),   //                                    .writedata
		.HostPC_debug_mem_slave_byteenable         (mm_interconnect_0_hostpc_debug_mem_slave_byteenable),  //                                    .byteenable
		.HostPC_debug_mem_slave_waitrequest        (mm_interconnect_0_hostpc_debug_mem_slave_waitrequest), //                                    .waitrequest
		.HostPC_debug_mem_slave_debugaccess        (mm_interconnect_0_hostpc_debug_mem_slave_debugaccess), //                                    .debugaccess
		.Memory_s1_address                         (mm_interconnect_0_memory_s1_address),                  //                           Memory_s1.address
		.Memory_s1_write                           (mm_interconnect_0_memory_s1_write),                    //                                    .write
		.Memory_s1_readdata                        (mm_interconnect_0_memory_s1_readdata),                 //                                    .readdata
		.Memory_s1_writedata                       (mm_interconnect_0_memory_s1_writedata),                //                                    .writedata
		.Memory_s1_byteenable                      (mm_interconnect_0_memory_s1_byteenable),               //                                    .byteenable
		.Memory_s1_chipselect                      (mm_interconnect_0_memory_s1_chipselect),               //                                    .chipselect
		.Memory_s1_clken                           (mm_interconnect_0_memory_s1_clken),                    //                                    .clken
		.uart_s1_address                           (mm_interconnect_0_uart_s1_address),                    //                             uart_s1.address
		.uart_s1_write                             (mm_interconnect_0_uart_s1_write),                      //                                    .write
		.uart_s1_read                              (mm_interconnect_0_uart_s1_read),                       //                                    .read
		.uart_s1_readdata                          (mm_interconnect_0_uart_s1_readdata),                   //                                    .readdata
		.uart_s1_writedata                         (mm_interconnect_0_uart_s1_writedata),                  //                                    .writedata
		.uart_s1_begintransfer                     (mm_interconnect_0_uart_s1_begintransfer),              //                                    .begintransfer
		.uart_s1_chipselect                        (mm_interconnect_0_uart_s1_chipselect)                  //                                    .chipselect
	);

	UART_NIOSII_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.sender_irq    (hostpc_irq_irq)                  //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (hostpc_debug_reset_request_reset),   // reset_in1.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_in1      (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
